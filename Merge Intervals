input -> 5
2 4 6 8 1
3 5 7 9 10

Desired Output
1 10

input -> 8
1 5 3 9 7 11 18 15
2 6 4 10 8 14 20 17
Desired Output
1 2
3 4
5 6
7 8
9 10
11 14
15 17
18 20

from os import *
from sys import *
from collections import *
from math import *

from sys import stdin,setrecursionlimit

class Solution:
    def __init__ (self, start, end):
        self.start = start
        self.end = end

def mergeIntervals(intervals):
    # Write your code here.
    res=[]
    n = len(intervals)
    for i in range(n):
        st = intervals[i].start
        ed = intervals[i].end
        if(len(res) == 0 or st > res[len(res)-1].end):
            res.append(intervals[i])
        else:
            res[len(res)-1].end = max(res[len(res)-1].end, ed)
        
    return res
    

n = int(input())
arr1 = list(map(int, stdin.readline().strip().split(" ")))
arr2 = list(map(int, stdin.readline().strip().split(" ")))
arr1.sort()
arr2.sort()
intervals = []
for i in range(n):
    a = Solution(arr1[i], arr2[i])
    intervals.append(a)

res = mergeIntervals(intervals)

for i in range(len(res)):
    print(res[i].start, res[i].end)
