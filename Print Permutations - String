
input -> 
exqc

Desired Output
exqc
excq
eqxc
eqcx
ecqx
ecxq
xeqc
xecq
xqec
xqce
xcqe
xceq
qxec
qxce
qexc
qecx
qcex
qcxe
cxqe
cxeq
cqxe
cqex
ceqx
cexq

from os import *
from sys import *
from collections import *
from math import *

def swap(lst, i, j):
    lst[i],lst[j]=lst[j],lst[i]

def findPermutationsHelper(lst, i, ans):
    if (i >= len(lst)):
        # Storing the string in the vector ans.
#         permutation = ""

#         for k in range(len(lst)):
#             permutation += (lst[k])  

        ans.append("".join(lst))
        return

    # Fixing a character at index i and then swapping with characters from index i to j and by this way building up permutation strings.
    for k in range(i,len(lst)):
        swap(lst, i, k)
        findPermutationsHelper(lst, i + 1, ans)
        swap(lst, i, k) //backtrack step
    

def findPermutations(s):
    # Declaring a vector of string to store all the possible permutations of the string.
    ans = []
    lst = list(s)
    # Calling the user defined function which stores all the possible permutations of the string in the vector ans.
    findPermutationsHelper(lst, 0, ans)
    return ans
